# Query
extend type Query  {
    allComment:[Comment]
    allCommentByFileId(fileId: ID! ):[Comment]
    comment(id: ID! ):Comment
    allMessagesForThisAgent: [Message!]!
    messageByIdForThisAgent(messageId: ID!): Message
}
#mutation
extend type  Mutation{
    createComment(input: CommentInput! ):Comment
    updateComment(input: CommentInput! ):Comment
    deleteComment(id: ID!): Boolean
    uploadImage(image: Upload!):String
}
input CommentInput {
    id:ID
    content:String
    fileActivity: FileActivityInput
    agent: AgentInput
    createdDate:String
    fileTask:FileTaskInput
    attachments: [AttachmentInput]
}
type  DescriptionComment implements IComment{
    id:ID
    content:String
    fileActivity:FileActivity
    agent: Agent
    createdDate: String
    fileTask: FileTask
    type: CommentType

}
type  ReturnedComment implements IComment{
    id:ID
    content:String
    fileActivity:FileActivity
    agent: Agent
    createdDate: String
    fileTask: FileTask
    type: CommentType

}
type Comment {
    id:ID
    content:String
    fileActivity:FileActivity
    agent: Agent
    createdDate: String
    fileTask: FileTask
    type: CommentType

}
type Message{
    id: ID
    readMessage: Boolean
    comment: Comment
    agent: Agent
    targetAgent: Agent
}
interface IComment {
    id:ID
    content:String
    fileActivity:FileActivity
    agent: Agent
    fileTask: FileTask
    type: CommentType

}
enum CommentType{
    Comment,
    Description,
    Returned
}
input  NotifyMessageInput {
    idComment:ID!
    agentIds:[ID!]
}